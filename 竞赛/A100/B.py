from collections import Counter
from typing import List


class Solution:
    def maximizeGreatness(self, nums: List[int]) -> int:
        c = Counter(nums)
        return len(nums) - max(c.values())



if __name__ == '__main__':
    solution = Solution()
    nums = [27847,404067,113435,745596,830013,58053,504899,809502,730140,74262,818064,488964,669583,8810,790779,141458,795014,660564,435962,958590,659047,226404,364548,38893,747003,651364,590857,448975,908061,730623,299559,578974,962573,798701,92201,47719,799248,454224,873634,492604,574625,878087,65671,818453,636997,592910,918285,22329,299916,576361,417346,915445,437199,43429,363898,157129,318077,525093,124217,633112,83145,448945,842536,979575,603219,546126,191915,485481,691643,887835,570341,97593,335145,758127,617949,223359,504075,801860,917467,841013,169490,219032,794901,93738,901585,187807,558097,267023,917941,278301,941117,24113,731871,431166,704161,551399,662546,489380,451468,979264,728217,389386,983962,837590,806143,987323,935736,905137,322727,938973,54838,231303,684189,780771,351210,583429,761859,822190,211508,360684,505838,655872,403192,44826,708987,277597,605322,138879,216659,595551,53807,703790,100408,241440,617253,843108,151488,404667,113721,596417,855626,92867,688655,54771,805750,975717,926727,139958,222278,587053,560892,578865,706819,269748,156493,719709,746708,814464,726176,445948,158251,293464,291140,48348,686258,388761,214457,829937,176649,208555,518440,604011,932772,495958,817754,518634,196263,620047,715371,389571,677729,142357,518471,655356,907508,119142,853688,319111,929565,852693,738752,636521,525093,69762,675512,481061,924087,324628,598652,415991,609666,490730,476081,511793,632740,904553,495348,536108,919194,662940,368354,58525,462702,711267,358583,906345,115847,847232,920219,121492,164665,328398,134355,25136,864869,600213,296501,488058,602560,428226,163623,866676,597845,691604,429732,772683,870251,346052,973662,818524,372066,592190,790039,736438,222548,289062,636757,856726,829044,809046,113816,492523,590714,42062,518765,400751,336718,359563,418294,800561,214254,726503,7107,925804,586486,329577,469259,495446,446060,23696,656584,56571,697886,992362,667066,246481,613064,529945,39999,90096,697929,351213,241313,378144,753814,509743,665354,562276,220750,875116,289491,364913,432887,128176,439589,651256,400856,512658,145267,292876,20053,425691,229721,32987,862649,24743,537786,750301,84591,968535,855326,172989,546684,433443,110467,73298,896632,109813,409786,885414,208787,925390,786200,668296,864179,127654,622357,522757,990499,573585,490663,859276,367834,791890,650343,751692,677565,546597,27806,184613,189318,300679,318495,806558,650246,453834,127979,382987,213151,545461,581469,773583,16595,589186,353298,979112,668567,672823,411759,4968,782990,213443,434848,357830,409758,401117,623882,331175,328425,259908,948977,709814,659206,589222,672096,333710,510818,956832,731572,73148,156962,561287,472345,608787,558082,524861,178972,693782,532827,299765,468471,802621,317509,128494,184054,920822,197746,446526,839538,940504,722333,134318,186071,41737,15206,270128,568477,551228,358779,952154,873536,14824,668603,550003,430320,279349,499602,136639,635111,90190,222957,510768,454280,561820,546955,679377,298450,670666,963666,569770,378596,888772,521322,248123,184538,891628,797934,252079,746818,817555,884359,340412,904030,222259,422604,753683,986271,74601,875229,355907,586297,83745,233104,793703,322441,254458,579210,243475,519776,901180,881976,866297,429583,816512,987813,311114,194120,351336,136986,533203,884709,879995,273428,52299,959968,574026,57454,517835,171583,680134,182882,321359,780678,536727,625887,12140,202789,653274,516474,310329,539013,479976,510911,709330,770007,116026,148588,12501,364252,873480,91529,450399,302387,325269,774972,863493,182119,149272,922483,324629,352036,951861,465041,79663,737722,547291,621666,107845,5237,243272,624691,814748,352343,9632,833845,614699,345241,796571,257610,432852,827887,786268,861445,734472,454336,695423,544786,354203,540227,486001,286900,88850,294543,301178,958133,10111,363959,979441,334631,942373,565431,590620,401778,537909,608829,532307,652365,62379,437644,330979,198617,541891,312817,441227,475231,585221,985796,707045,795858,991403,425085,112329,843834,706241,628884,863601,403286,543190,597561,753745,654998,486,480902,17740,594051,680859,982338,575610,147289,740302,931117,302760,762567,841954,387823,956392,704749,391027,51716,836681,504933,200710,807670,552152,391994,696034,867112,121315,819793,159531,530905,808398,642544,388282,460078,455808,177288,371775,15268,500956,874778,379657,487778,737474,920097,541355,139277,190322,750342,797255,897201,449621,666580,432738,979980,722957,322971,693036,146214,174004,658442,646774,755057,554794,815004,588471,153298,374593,483081,957257,893265,448149,909425,279236,991461,480753,555398,830261,173317,619507,630233,767836,905767,616069,101405,712345,50382,533079,410701,465393,75676,838650,949911,169447,224359,783796,523389,866676,219937,292126,728941,524848,970226,319940,126929,77729,371822,264269,397381,48820,932839,737960,275621,529349,819743,680416,790073,423453,797047,483969,27578,727848,770031,24332,47526,646514]
    # nums = [1,2,3,4]
    # nums = [42,8,75,28,35,21,13,21]
    res = solution.maximizeGreatness(nums)
    print(res)